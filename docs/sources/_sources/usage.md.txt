# Usage

The following collection of pages are a concise reference of everything you need to know about PADL.
Read them all to know everything you need to get started.

## The magical *Transform*

The central abstraction in PADL is the *Transform*. Essentially, a Transform
is a function with added functionality for the deep learning workflow.

With transforms you can:

- build complex workflows with an elegant formalism and with minimal boilerplate code
- preprocess data using multi-processing without creating custom DataLoaders
- stop worrying about adding batch dimensions, dis- or enabling gradients or sending data to the GPU
- work interactively in a notebook, easily inspect, slice and debug your transforms
- save your whole workflow in a transparent, flexible format that enables reproducibility

and much more.


```{toctree}
:caption: 'Contents:'
:maxdepth: 1

usage/creating_transforms.md
usage/combining_transforms.md
usage/stages.md
usage/apply.md
usage/saving.md
usage/print_slice.md
usage/Extras.md
```

## Import anything you need `from padl`

- {func}`~padl.transform` for making Transforms.
- {func}`~padl.save` for saving Transforms.
- {func}`~padl.load` for loading Transforms.
- {func}`~padl.value` for saving by value.
- {func}`~padl.group` for grouping Compound Transforms.
- {obj}`~padl.identity` for doing nothing.
- {obj}`~padl.batch` for defining the batchified part of a pipeline.
- {obj}`~padl.unbatch` for defining the postprocessing part of a pipeline.
- {obj}`~padl.same` for applying a value's method.
- {class}`~padl.IfInfer` for conditioning on the 'infer'-stage.
- {class}`~padl.IfEval` for conditioning on the 'eval'-stage.
- {class}`~padl.IfTrain` for conditioning on the 'try'-stage.
- {class}`~padl.Try` for catching exceptions in a transform.
